extends layout

block content
  .row
    .large-12.columns.fre-container
      .row
        .large-12.columns
          h1 Connect Tessel to Wifi
      br
      .row
        .large-12.columns
          p Tessel can only connect to <b>802.11b/g</b> networks using <b>channels 1 through 11</b>. The wifi chip does not support 802.11n or channels 12 - 14. If you are having trouble connecting, make sure the router has b/g mode enabled and isn't using channels 12, 13, or 14.
          p <b>To connect to a new network,</b> enter in your command line (without brackets)
          code
            cli tessel wifi -n [network name] -p [password] -s [security type*]
          i <code>*</code>The security type flag is optional; default is wpa2.<br/><br/>
      .row
        .large-12.columns
          .greyBar(style="height:2px;")
      .row
        .large-6.columns
          p Tessel will blink the yellow status light while connecting, and will leave the yellow light on if it connects. Tessel saves network credentials and tries to reconnect automatically on startup.
          p To check whether you're connected, run
          code
            cli tessel wifi -l
          p This lists available wifi networks and will also show your connection status.
          p If the red status light goes on, it means Tessel tried to connect to a network but was unable to succeed. The red LED also turns on if the wifi connection drops. 
          ul 
            li Steady yellow LED = Tessel is connected to wifi
            li Steady red LED = Tessel is not connected to wifi

          p All 4 LEDS (red, blue, green, and yellow) are accessible through Tessel's <a href="https://tessel.io/docs/hardwareAPI#api-array-Pin-tessel-led" target="_blank">hardware API</a>. If user pushed code is changing the state of the yellow/red LEDs, they will no longer be reliable indicators of Wifi state.
        .large-6.columns
          img(src="#{s3url}wifi.JPG").constrain
      .row
        .large-12.columns
          .greyBar(style="height:2px;")
          p Here is an example of requesting a website over Tessel's Wifi connection:
          p Make a wifi directory
          code 
            cli mkdir wifi
            cli cd wifi
            cli npm init

          p Save the following code in a file called <code>wifi.js</code>:
          pre.prettyprint#exampleCode
            code.
              var http = require('http');

              var statusCode = 200;
              var count = 1;

              setImmediate(function start () {
                console.log('http request #' + (count++))
                http.get("http://httpstat.us/" + statusCode, function (res) {
                  console.log('# statusCode', res.statusCode)

                  var bufs = [];
                  res.on('data', function (data) {
                    bufs.push(new Buffer(data));
                    console.log('# received', new Buffer(data).toString());
                  })
                  res.on('end', function () {
                    console.log('done.');
                    setImmediate(start);
                  })
                }).on('error', function (e) {
                  console.log('not ok -', e.message, 'error event')
                  setImmediate(start);
                });
              });

          p Run the code on your Tessel by typing this in the terminal:
          p <code><cli>tessel run wifi.js</cli></code>
          p Watch Tessel ping the website in your console!

      .row
        .large-12.columns
          .greyBar(style="height:2px;")
          
          p Tessel's wifi can also be controlled programatically. The full API docs can be found
            a(href="https://github.com/tessel/t1-docs/blob/master/wifi.md") here.

          p Save the following in a file called <code>wifi-control.js</code>:
          pre.prettyprint#wifiExampleCode
            code.
              /* the wifi-cc3000 library is bundled in with Tessel's firmware,
               * so there's no need for an npm install. It's similar
               * to how require('tessel') works.
               */ 
              var wifi = require('wifi-cc3000');
              var network = '#####'; // put in your network name here
              var pass = '#####'; // put in your password here, or leave blank for unsecured
              var security = 'wpa2'; // other options are 'wep', 'wpa', or 'unsecured'
              var timeouts = 0;

              wifi.on('connect', function(data){
                // you're connected
                console.log("connect emitted", data);
              });

              wifi.on('disconnect', function(data){
                // wifi dropped, probably want to call connect() again
                console.log("disconnect emitted", data);
              })

              wifi.on('timeout', function(err){
                // tried to connect but couldn't, retry
                console.log("timeout emitted");
                timeouts++;
                if (timeouts > 2) {
                  // reset the wifi chip if we've timed out too many times
                  powerCycle();
                } else {
                  // try to reconnect
                  connect();
                }
              });

              wifi.on('error', function(err){
                // one of the following happened
                // 1. tried to disconnect while not connected
                // 2. tried to disconnect while in the middle of trying to connect
                // 3. tried to initialize a connection without first waiting for a timeout or a disconnect
                console.log("error emitted", err);
              });

              // reset the wifi chip progammatically
              function powerCycle(){
                // when the wifi chip resets, it will automatically try to reconnect
                // to the last saved network
                wifi.reset(function(){
                  timeouts = 0; // reset timeouts
                  console.log("done power cycling");
                  // give it some time to auto reconnect
                  setTimeout(function(){
                    if (!wifi.isConnected()) {
                      // try to reconnect
                      connect();
                    }
                    }, 20 *1000); // 20 second wait
                })
              }

              function connect(){
                wifi.connect({
                security: security
                , ssid: network
                , password: pass
                , timeout: 30 // in seconds
                });
              }

              // connect wifi now, if not already connected
              if (!wifi.isConnected()) {
                connect();
              }

      .row
        .large-12.columns
          .greyBar(style="height:2px;")
      .row
        .large-12.columns
          p <b>If you run into errors:</b> First, check to make sure the yellow status light is on. If it is not, you are not connected to Wifi. Try power cycling your Tessel and then run the <code>tessel wifi</code> command again.
          p If you're still having trouble, please log your error on the <a href="http://forums.tessel.io/category/wifi">Wifi forums</a>.

block bottom_nav
  .row
    .large-5.columns.left
      a.bottomButton(href="/modules" class="button") Prev: Add modules
    .large-6.columns.right
      a.bottomButton.right(href="/usage" class="button") Next: Usage
    //- .large-6.columns.right
    //-   a.bottomButton.right(href="/tweet" class="button") Next: Tweet
